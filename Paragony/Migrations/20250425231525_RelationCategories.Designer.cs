// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Paragony.Data;

#nullable disable

namespace Paragony.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250425231525_RelationCategories")]
    partial class RelationCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Paragony.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4df2457f-af33-4c31-8b70-86db6bdc35aa"),
                            Description = "Artykuły spożywcze",
                            Name = "Jedzenie"
                        },
                        new
                        {
                            Id = new Guid("882e9888-f64b-41e9-99bc-2c9f52bc79c3"),
                            Description = "Środki czystości i higieny",
                            Name = "Chemia"
                        },
                        new
                        {
                            Id = new Guid("d3225f27-b658-4696-b2b8-68c7670e2cd7"),
                            Description = "Urządzenia elektroniczne",
                            Name = "Elektronika"
                        },
                        new
                        {
                            Id = new Guid("ab5bdd86-8bf1-4ed4-8ee1-9a2b9e6995a9"),
                            Description = "Odzież i obuwie",
                            Name = "Ubrania"
                        },
                        new
                        {
                            Id = new Guid("27dfb8ce-f64a-442d-b3a8-9a767dd83a0e"),
                            Description = "Artykuły domowe",
                            Name = "Dom"
                        },
                        new
                        {
                            Id = new Guid("27653b89-3b92-4ace-87c3-f025dcab07b3"),
                            Description = "Alkohol",
                            Name = "Alkohol"
                        },
                        new
                        {
                            Id = new Guid("7223583b-ac12-4db7-8043-b9d81427ff9e"),
                            Description = "Inne",
                            Name = "Inne"
                        });
                });

            modelBuilder.Entity("Paragony.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Paragony.Models.ReceiptItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptItems");
                });

            modelBuilder.Entity("Paragony.Models.ReceiptItem", b =>
                {
                    b.HasOne("Paragony.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Paragony.Models.Receipt", "Receipt")
                        .WithMany("Items")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Paragony.Models.Receipt", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
